apiVersion: v1
kind: Template
metadata:
  name: launchpad-builder-shared-work-queue
  annotations:
    description: This template creates a Build Configuration using an S2I builder.
    tags: instant-app
parameters:
- name: SOURCE_REPOSITORY_URL
  description: The source URL for the application
  displayName: Source URL
  required: true
- name: SOURCE_REPOSITORY_REF
  description: The branch name for the application
  displayName: Source Branch
  value: master
  required: true
- name: SOURCE_REPOSITORY_DIR
  description: The location within the source repo of the application
  displayName: Source Directory
  value: .
  required: true
- name: ARTIFACT_COPY_ARGS
  description: Syntax to be used to copy uberjar files to the target directory
  displayName: Copy Args
  value: '*-exec.jar'
  required: true
- name: GITHUB_WEBHOOK_SECRET
  description: A secret string used to configure the GitHub webhook.
  displayName: GitHub Webhook Secret
  required: true
  from: '[a-zA-Z0-9]{40}'
  generate: expression
- name: MAVEN_MIRROR_URL
  description: Maven Nexus Repository to be used during build phase
  displayName:
  required: false
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: s2i-java
  spec:
    tags:
    - name: "2.1"
      annotations:
        description: Fabric8 Java S2I images.
        version: '2.1'
      from:
        kind: DockerImage
        name: 'fabric8/s2i-java'
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: 
  spec: {}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: worker
    labels:
      app: wfswarm-shared-work-queue-mission-worker
      group: com.redhat.amq.boosters
      provider: fabric8
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: worker:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        uri: ${SOURCE_REPOSITORY_URL}
        ref: ${SOURCE_REPOSITORY_REF}
        #contextDir: ${SOURCE_REPOSITORY_DIR}
      type: Git
    strategy:
      sourceStrategy:
        env:
          - name: BUILD_LOGLEVEL
            value: '5'
          - name: MAVEN_ARGS_APPEND
            value: "-pl ${SOURCE_REPOSITORY_DIR}"
          - name: ARTIFACT_DIR
            value: "${SOURCE_REPOSITORY_DIR}/target"
          - name: MAVEN_MIRROR_URL
            value: "${MAVEN_MIRROR_URL}"
          - name: ARTIFACT_COPY_ARGS
            value: "${ARTIFACT_COPY_ARGS}"
        forcePull: true
        from:
          kind: ImageStreamTag
          name: s2i-java:2.1
        incremental: true
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/port: "9779"
      prometheus.io/scrape: "true"
    labels:
      expose: "true"
      app: wfswarm-shared-work-queue-mission-worker
      provider: fabric8
      group: com.redhat.amq.boosters
    name: worker
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: wfswarm-shared-work-queue-mission-worker
      provider: fabric8
      group: com.redhat.amq.boosters
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: wfswarm-shared-work-queue-mission-worker
      provider: fabric8
      group: com.redhat.amq.boosters
    name: worker
  spec:
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      app: wfswarm-shared-work-queue-mission-worker
      provider: fabric8
      group: com.redhat.amq.boosters
    strategy:
      rollingParams:
        timeoutSeconds: 3600
      type: Rolling
    template:
      metadata:
        labels:
          app: wfswarm-shared-work-queue-mission-worker
          provider: fabric8
          group: com.redhat.amq.boosters
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: worker:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 180
          name: worker
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 9779
            name: prometheus
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
          securityContext:
            privileged: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - worker
        from:
          kind: ImageStreamTag
          name: worker:latest
      type: ImageChange
